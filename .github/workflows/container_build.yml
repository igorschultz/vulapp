name: Container Build
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'    

permissions:
  contents: read

jobs:
  build-image:
    name: Build image
    runs-on: ubuntu-latest

    env:
      GITHUB_SHA: ${{ github.sha }}


    steps:
    - name: Checkout project
      uses: actions/checkout@v4.1.1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"
  
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
        
    - name: Install gke-gcloud-auth-plugin
      run: gcloud components install kubectl
  
    - name: Check gke-gcloud-auth-plugin
      run: kubectl version --client
        
    - name: Use gcloud CLI
      run: gcloud info
  
    - name: Docker auth
      run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

    - name: Set version
      id: version
      run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: "Docker build and tag image"
      run: |
        docker build -t ${{ secrets.CONTAINER_REPO }}:$GITHUB_SHA -t ${{ secrets.CONTAINER_REPO }}:$GITHUB_SHA .

    - name: Checkout project
      uses: actions/checkout@v4.1.1
        
    - name: Scan Container Image with CrowdStrike
      uses: CrowdStrike/container-image-scan-action@main
      with:
        container_repository: ${{ secrets.CONTAINER_REPO }}
        container_tag: ${{ env.GITHUB_SHA }}
        crowdstrike_region: us-1
        crowdstrike_score: 5000
        retry_count: 30
      env:
        FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
        FALCON_CLIENT_ID: ${{ secrets.FALCON_CLIENT_ID }}
        JSON_REPORT: /tmp/report.json        

    - name: Upload Scan Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: image_scan_output
        path: /tmp/output.json        

#   - name: Patch the docker image with Falcon Container Sensor
#     env:
#       VERSION: ${{ steps.version.outputs.VERSION }}
#     run: |
#       curl -sSL -o falcon-container-sensor-pull.sh "https://raw.githubusercontent.com/CrowdStrike/falcon-scripts/main/bash/containers/falcon-container-sensor-pull/falcon-container-sensor-pull.sh"
#       chmod +x falcon-container-sensor-pull.sh
#       export LATESTSENSOR=$(bash <(curl -Ls https://github.com/CrowdStrike/falcon-scripts/releases/latest/download/falcon-container-sensor-pull.sh) -t falcon-container | tail -1) && echo $LATESTSENSOR
#       export FALCON_CID=$(./falcon-container-sensor-pull.sh -t falcon-container --get-cid)
#       docker run --user 0:0 -v ${HOME}/.docker/config.json:/root/.docker/config.json -v /var/run/docker.sock:/var/run/docker.sock --rm $LATESTSENSOR falconutil patch-image ecsfargate --source-image-uri ${DOCKER_IMAGE} --target-image-uri $IMAGE_REPO:patched --falcon-image-uri $LATESTSENSOR --cid $FALCON_CID --image-pull-policy IfNotPresent
    
    - name: Tag & Push docker image
      env:
        VERSION: ${{ steps.version.outputs.VERSION }}
      run: |
        VULAPP_IMAGE_URI="${{ secrets.CONTAINER_REPO }}:${{ steps.version.outputs.VERSION }}"
        docker tag $LOCAL_REPO:$LOCAL_TAG $VULAPP_IMAGE_URI
        gcloud auth configure-docker us-central1-docker.pkg.dev
        docker push $VULAPP_IMAGE_URI