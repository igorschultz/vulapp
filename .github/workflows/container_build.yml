name: Container Build
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'    

permissions: write-all

jobs:
  build-todolist-image:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    env:
      GITHUB_SHA: ${{ github.sha }}


    steps:
      - name: Checkout project
        uses: actions/checkout@v4.1.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
          token_format: 'access_token'
          create_credentials_file: true
    
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'
    
      - name: Docker auth
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Docker build & tag image
        run: |
          docker build --platform=linux/amd64 -t ${{ secrets.CONTAINER_REPO }}:${{ env.GITHUB_SHA }} .
          
      - name: Scan Container Image with CrowdStrike for Vulnerabilities Only
        uses: crowdstrike/fcs-action@v2.0.2
        with:
          falcon_client_id: ${{ secrets.FALCON_CLIENT_ID }}
          falcon_region: 'us-1'
          scan_type: image
          image: "${{ secrets.CONTAINER_REPO }}:${{ env.GITHUB_SHA }}"
          minimum_severity: medium
          minimum_exprt: medium
          report_sort_by: severity/desc
          vuln_fixable_only: true
          upload_results: true
          report_formats: json,sarif
          output_path: './vuln-results/results.json'
        env:
          FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
  
      - name: Upload SARIF report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: './vuln-results'
          category: 'container-scan'
          wait-for-processing: true
          
      - name: Run FCS IaC Scan
        id: fcs
        uses: crowdstrike/fcs-action@v2.0.2
        with:
          falcon_client_id: ${{ secrets.FALCON_CLIENT_ID }}
          falcon_region: 'us-1'
          path: 'main.tf'
          fail_on: 'high=10'
          report_formats: 'sarif'
          output_path: './scan-results'
          version: 2.1.0
          upload_results: true
        env: 
          FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}

      - name: Upload SARIF report to GitHub Code scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./scan-results

      - name: Patch Container Image with Falcon Sensor
        uses: crowdstrike/falconutil-action@v1.1.0
        with:
          falcon_client_id: ${{ secrets.FALCON_CLIENT_ID }}
          falcon_region: 'us-1'
          source_image_uri: '${{ secrets.CONTAINER_REPO }}:${{ env.GITHUB_SHA }}'
          target_image_uri: '${{ secrets.CONTAINER_REPO }}:patched'
          cid: '${{ secrets.FALCON_CID }}'
          falconctl_opts: '--tags=serverless'
          cloud_service: CLOUDRUN
          image_pull_policy: IfNotPresent
        env:
          FALCON_CLIENT_SECRET: '${{ secrets.FALCON_CLIENT_SECRET }}'
            
      - name: Push docker image to Google Artifact Registry
        run: |
          docker push ${{ secrets.CONTAINER_REPO }}:patched

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
    
      - name: Terraform Apply
        run: terraform apply --auto-approve -var "project=${{ secrets.PROJECT_ID }}"  -var "image=${{ secrets.CONTAINER_REPO }}:patched"  -lock=false